////////////////
// COUNT queries
////////////////

SELECT count(*)
FROM domain;

SELECT count(*)
FROM history;


///////////////
// DISTINCT queries
////////////////

SELECT count(distinct(id))
FROM domain;

SELECT distinct(id)
FROM domain;

SELECT distinct(id), url
FROM domain;


/////////////////
// Top 100 Results
////////////////

SELECT * 
FROM history
ORDER BY id ASC 
LIMIT 100;


/////////////////
// NULL Ratings
////////////////

SELECT count(*) 
FROM history
WHERE rating IS NULL;


/////////////////
// EMPTY Ratings
////////////////

SELECT count(*) AS "Number of Empty Ratings"
FROM history
WHERE rating = '';

// Result "45089" out of over 200,000


/////////////////
// Domain Rating History 100 ROWS
////////////////

SELECT 

d.id AS "ID", 
d.url AS "URL", 
h.datein AS "Timestamp",
h.rating AS "Rating" 

FROM domain d, history h
WHERE d.id = h.domainhistory
ORDER BY d.id ASC 
LIMIT 100;


/////////////////
// Domain Rating History
////////////////


SELECT 

d.id AS "ID", 
d.url AS "URL", 
h.datein AS "Timestamp",
h.rating AS "Rating" 

FROM domain d, history h
WHERE d.id = h.domainhistory
ORDER BY d.id ASC;

/////////////////
// Domain Rating History with Rating Cleaned
////////////////

SELECT 

d.id AS "ID", 
d.url AS "URL", 
h.datein AS "Timestamp",
TRIM(regexp_replace(regexp_replace(regexp_replace(h.rating, '\n', ''),'\t', ''),'\r', '')) AS "Rating" 

FROM domain d, history h
WHERE d.id = h.domainhistory
ORDER BY d.id ASC, h.datein ASC;


/////////////////
// Domain Rating History with Rating Cleaned
////////////////

SELECT 

d.id AS "ID", 
d.url AS "URL", 
h.datein AS "Timestamp",

TRIM(
	regexp_replace(
		regexp_replace(
			regexp_replace(h.rating, '\n', ''),
				'\t', ''),
					'\r', '')
	) AS "Rating" 

FROM domain d, history h
WHERE d.id = h.domainhistory
ORDER BY d.id ASC, h.datein ASC;


/////////////////
// Number of Configurations per Domain
////////////////

SELECT 

d.id AS "ID", 
count(h.rating) AS "Number of Configurations" 

FROM domain d, history h
WHERE d.id = h.domainhistory
GROUP BY d.id
ORDER BY d.id ASC;


/////////////////
// Number of Configurations per Domain GROUP by 
// Number or Configuration Attempts
////////////////

SELECT
    DISTINCT ConfigCounts.NumberOfConfigurations AS "Number of Configurations" ,
	COUNT (ConfigCounts.NumberOfConfigurations) AS "Number of Configuration Attempts" 
FROM
(
    SELECT count(h.domainhistory) AS NumberOfConfigurations
	FROM domain d, history h
	WHERE d.id = h.domainhistory
	GROUP BY h.domainhistory
) 
	AS ConfigCounts
GROUP BY ConfigCounts.NumberOfConfigurations
ORDER by ConfigCounts.NumberOfConfigurations ASC;


/////////////////
// Getting counts of all possible gradings 
// for "Number of Configuration Attempt" Groups
///////////////

SELECT 

h.domainhistory AS ID,
TRIM(
	regexp_replace(
		regexp_replace(
			regexp_replace(h.rating, '\n', ''),
				'\t', ''),
					'\r', '')
	) AS Rating
	
FROM domain d, history h
WHERE d.id = h.domainhistory
ORDER BY h.domainhistory, Rating;


/////////////////
// Query to see BEST and POOREST ratings 
///////////////

SELECT
    DISTINCT AllRatings.ID AS ID,
	AllRatings.url AS URL,
	COUNT (*) AS Attempts,
	MIN (AllRatings.Rating) AS "Best Rating",
	MAX (AllRatings.Rating) AS "Poorest Rating"
FROM
(
    SELECT h.domainhistory AS ID,
	d.url AS url,
	TRIM(
	regexp_replace(
		regexp_replace(
			regexp_replace(h.rating, '\n', ''),
				'\t', ''),
					'\r', '')
	) AS Rating
	
	FROM domain d, history h
	WHERE d.id = h.domainhistory
	ORDER BY h.domainhistory, Rating
) 
	AS AllRatings
GROUP BY AllRatings.ID, AllRatings.url
ORDER by AllRatings.ID ASC;


/////////////////
// Normalize Rating
// Update Rating Field in History Table
///////////////

SELECT 
DISTINCT TRIM(
regexp_replace(
	regexp_replace(
	regexp_replace(h.rating, '\n', ''),
			'\t', ''),
					'\r', '')
) AS Rating

FROM history h
ORDER BY rating ASC;

//##

SELECT COUNT(rating)
FROM history
WHERE rating = ''; 

//## "45089" ratings are empty ratings 

UPDATE history
SET rating = NULL
WHERE rating = '';

//## Removing some spaces etc RAN IT TWICE :(

UPDATE history

SET rating = TRIM(
				regexp_replace(
					regexp_replace(
						regexp_replace(rating, '\n', ''),
							'\t', ''),
									'\r', ''))

WHERE rating IS NOT NULL;



/////////////////
// Normalize Qualys
// Update Qualys Field in History Table 
// Change its type to JSONB
///////////////

SELECT COUNT(*)
FROM history
WHERE qualys = '';

//## ""126672"" Qualys are empty 

UPDATE history
SET qualys = '{}'
WHERE qualys = '';

ALTER TABLE history 
ALTER COLUMN qualys
TYPE JSONB 
USING qualys::JSONB;

/////////////////
// Getting Best and Worst Ratings 
// for Analysis in R
///////////////

SELECT
    DISTINCT AllRatings.ID AS ID,
	COUNT (*) AS Attempts,
	MIN (AllRatings.Rating) AS "BestRating",
	MAX (AllRatings.Rating) AS "PoorestRating"
FROM
(
    SELECT h.domainhistory AS ID,
	d.url AS url,
	TRIM(
	regexp_replace(
		regexp_replace(
			regexp_replace(h.rating, '\n', ''),
				'\t', ''),
					'\r', '')
	) AS Rating
	
	FROM domain d, history h
	WHERE d.id = h.domainhistory
	ORDER BY h.domainhistory, Rating
) 
	AS AllRatings
GROUP BY AllRatings.ID
ORDER by Attempts ASC;



/////////////////
// Getting Ratings and their Numbers 
///////////////

SELECT
    AllRatings.Rating AS Rating,
	sum(case when ((AllRatings.Rating is null) OR (AllRatings.Rating is NOT NULL)) then 1 else 0 end) AS Attempts
	
FROM
(
    SELECT 	
		h.Rating
	
	FROM domain d, history h
	WHERE d.id = h.domainhistory
	ORDER BY Rating DESC
) 
	AS AllRatings
GROUP BY AllRatings.Rating
ORDER by AllRatings.Rating ASC;

//##******************************************
//## REMOVE NULL ("45089") AND ERROR ("14819") ASSIGNED ATTEMPTS
//##******************************************


SELECT DISTINCT RATING	
FROM history  ; 


SELECT COUNT(*)
FROM history 
WHERE rating is null; 


SELECT COUNT(*)
FROM history 
WHERE rating LIKE 'E%'; 


DELETE 
FROM history 
WHERE rating is null;

DELETE 
FROM history 
WHERE rating LIKE 'E%';


//##******************************************
//## JSON Queries
//##******************************************

/////////////////
// Selecting Status using JSON Query
///////////////

SELECT id, qualys -> 'status'
FROM history H
LIMIT 100;



/////////////////
// Selecting IPADDRESS using JSON Query
///////////////

SELECT h.*, 
qualys #>'{endpoints,0,ipAddress}' AS IPADDRESS

FROM domain d, history h
WHERE d.id = h.domainhistory AND qualys != '{}'
LIMIT 100;



/////////////////
//  Getting Number of Endpoints for each config test attempt using JSON Query
///////////////

SELECT h.*, 
jsonb_array_length(qualys #>'{endpoints}') AS "Number of Endpoints"

FROM domain d, history h
WHERE d.id = h.domainhistory AND qualys != '{}'
LIMIT 100;


/////////////////
//  Getting Number of Endpoints and Endpoints for each config test attempt using JSON Query
///////////////
SELECT h.*, 
jsonb_array_length(qualys #>'{endpoints}') AS "Number of Endpoints",
qualys #>'{endpoints}' AS "Endpoints"


FROM domain d, history h
WHERE d.id = h.domainhistory AND qualys != '{}'
LIMIT 100;


/////////////////
//  protocols if ssl is enabled using JSON Query
///////////////

SELECT h.domainhistory, 
d.url, 
h.rating, 

jsonb_array_length(qualys #>'{endpoints,0,details,protocols}') AS "Total Number of Protocols Enabled",
replace(concat(qualys #>'{endpoints,0,details,protocols,0,name}',qualys #>'{endpoints,0,details,protocols,0,version}'),'"','') AS ProtocolOne,
replace(concat(qualys #>'{endpoints,0,details,protocols,1,name}',qualys #>'{endpoints,0,details,protocols,1,version}'),'"','') AS "ProtocolTwo",
replace(concat(qualys #>'{endpoints,0,details,protocols,2,name}',qualys #>'{endpoints,0,details,protocols,2,version}'),'"','') AS "ProtocolThree",
replace(concat(qualys #>'{endpoints,0,details,protocols,3,name}',qualys #>'{endpoints,0,details,protocols,3,version}'),'"','') AS "ProtocolFour",
replace(concat(qualys #>'{endpoints,0,details,protocols,4,name}',qualys #>'{endpoints,0,details,protocols,4,version}'),'"','') AS "ProtocolFive",

CASE 		WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,0,name}',qualys #>'{endpoints,0,details,protocols,0,version}'),'"','')='SSL2.0' THEN '1'
            WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,1,name}',qualys #>'{endpoints,0,details,protocols,1,version}'),'"','')='SSL2.0' THEN '1'
			WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,2,name}',qualys #>'{endpoints,0,details,protocols,2,version}'),'"','')='SSL2.0' THEN '1'
			WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,3,name}',qualys #>'{endpoints,0,details,protocols,3,version}'),'"','')='SSL2.0' THEN '1'
			WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,4,name}',qualys #>'{endpoints,0,details,protocols,4,version}'),'"','')='SSL2.0' THEN '1'
            ELSE '0'
END AS "SSL2Enabled",

CASE 		WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,0,name}',qualys #>'{endpoints,0,details,protocols,0,version}'),'"','')='SSL3.0' THEN '1'
            WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,1,name}',qualys #>'{endpoints,0,details,protocols,1,version}'),'"','')='SSL3.0' THEN '1'
			WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,2,name}',qualys #>'{endpoints,0,details,protocols,2,version}'),'"','')='SSL3.0' THEN '1'
			WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,3,name}',qualys #>'{endpoints,0,details,protocols,3,version}'),'"','')='SSL3.0' THEN '1'
			WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,4,name}',qualys #>'{endpoints,0,details,protocols,4,version}'),'"','')='SSL3.0' THEN '1'
            ELSE '0'
END  AS "SSL3Enabled",

CASE 		WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,0,name}',qualys #>'{endpoints,0,details,protocols,0,version}'),'"','')='TLS1.0' THEN '1'
            WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,1,name}',qualys #>'{endpoints,0,details,protocols,1,version}'),'"','')='TLS1.0' THEN '1'
			WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,2,name}',qualys #>'{endpoints,0,details,protocols,2,version}'),'"','')='TLS1.0' THEN '1'
			WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,3,name}',qualys #>'{endpoints,0,details,protocols,3,version}'),'"','')='TLS1.0' THEN '1'
			WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,4,name}',qualys #>'{endpoints,0,details,protocols,4,version}'),'"','')='TLS1.0' THEN '1'
            ELSE '0'
END  AS "TLS1Enabled",

CASE 		WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,0,name}',qualys #>'{endpoints,0,details,protocols,0,version}'),'"','')='TLS1.1' THEN '1'
            WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,1,name}',qualys #>'{endpoints,0,details,protocols,1,version}'),'"','')='TLS1.1' THEN '1'
			WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,2,name}',qualys #>'{endpoints,0,details,protocols,2,version}'),'"','')='TLS1.1' THEN '1'
			WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,3,name}',qualys #>'{endpoints,0,details,protocols,3,version}'),'"','')='TLS1.1' THEN '1'
			WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,4,name}',qualys #>'{endpoints,0,details,protocols,4,version}'),'"','')='TLS1.1' THEN '1'
            ELSE '0'
END  AS "TLS11Enabled",

CASE 		WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,0,name}',qualys #>'{endpoints,0,details,protocols,0,version}'),'"','')='TLS1.2' THEN '1'
            WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,1,name}',qualys #>'{endpoints,0,details,protocols,1,version}'),'"','')='TLS1.2' THEN '1'
			WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,2,name}',qualys #>'{endpoints,0,details,protocols,2,version}'),'"','')='TLS1.2' THEN '1'
			WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,3,name}',qualys #>'{endpoints,0,details,protocols,3,version}'),'"','')='TLS1.2' THEN '1'
			WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,4,name}',qualys #>'{endpoints,0,details,protocols,4,version}'),'"','')='TLS1.2' THEN '1'
            ELSE '0'
END  AS "TLS12Enabled"

FROM domain d, history h
WHERE d.id = h.domainhistory AND qualys != '{}';


/////////////////
//  ocspstapling using JSON Query
///////////////


SELECT h.domainhistory, 
d.url, 
h.rating,
qualys #>'{endpoints,0,details,ocspStapling}' AS "ocspstapling"

FROM domain d, history h
WHERE d.id = h.domainhistory AND qualys != '{}'
ORDER BY rating
;



/////////////////
//  supportsRc4 using JSON Query
///////////////

SELECT h.domainhistory, 
d.url, 
h.rating,
qualys #>'{endpoints,0,details,supportsRc4}' AS "supportsRc4"

FROM domain d, history h
WHERE d.id = h.domainhistory AND qualys != '{}'
ORDER BY rating;


/////////////////
// forwardSecrecy  using JSON Query
///////////////

SELECT h.domainhistory, 
d.url, 
h.rating,
qualys #>'{endpoints,0,details,forwardSecrecy}' AS "forwardSecrecy"

FROM domain d, history h
WHERE d.id = h.domainhistory AND qualys != '{}'
ORDER BY rating;




/////////////////
//  heartbleed using JSON Query
///////////////

SELECT h.domainhistory, 
d.url, 
h.rating,
qualys #>'{endpoints,0,details,heartbleed}' AS "heartbleed"

FROM domain d, history h
WHERE d.id = h.domainhistory AND qualys != '{}'
ORDER BY rating;




/////////////////
// poodle  using JSON Query
///////////////

SELECT h.domainhistory, 
d.url, 
h.rating,
qualys #>'{endpoints,0,details,poodle}' AS "poodle"

FROM domain d, history h
WHERE d.id = h.domainhistory AND qualys != '{}'
ORDER BY rating;




/////////////////
// hsts.status (absent,present)  using JSON Query
///////////////

SELECT h.domainhistory, 
d.url, 
h.rating,
qualys #>'{endpoints,0,details,hstsPolicy,status}' AS "hstsPolicy status"

FROM domain d, history h
WHERE d.id = h.domainhistory AND qualys != '{}'
ORDER BY rating;




/////////////////
// hpkp.status  using JSON Query
///////////////

SELECT h.domainhistory, 
d.url, 
h.rating,
qualys #>'{endpoints,0,details,hpkpPolicy,status}' AS "hpkpPolicy status"

FROM domain d, history h
WHERE d.id = h.domainhistory AND qualys != '{}'
ORDER BY rating;




/////////////////
// keySizeAndAlgo keysize and algorithm (e.g. RSA 2048 bit, or EC 256bit) using JSON Query
///////////////

SELECT h.domainhistory, 
d.url, 
h.rating,
qualys #>'{endpoints,0,details,chain,certs,0,keySize}' AS "keySize",
qualys #>'{endpoints,0,details,chain,certs,0,keyAlg}' AS "keyAlg",
qualys #>'{endpoints,0,details,chain,certs,0,sigAlg}' AS "sigAlg"

FROM domain d, history h
WHERE d.id = h.domainhistory AND qualys != '{}'
ORDER BY rating;




/////////////////
// CA  using JSON Query
///////////////


SELECT h.domainhistory, 
d.url, 
h.rating,
qualys #>'{endpoints,0,details,chain,certs,0,keySize}' AS "keySize",
qualys #>'{endpoints,0,details,chain,certs,0,keyAlg}' AS "keyAlg",
qualys #>'{endpoints,0,details,chain,certs,0,sigAlg}' AS "sigAlg",
qualys #>'{endpoints,0,details,chain,certs,0,issuerLabel}' AS "issuerLabel"

FROM domain d, history h
WHERE d.id = h.domainhistory AND qualys != '{}'
ORDER BY rating;



/////////////////
//  issuerLabel using JSON Query TODO
///////////////

SELECT count(h.*) freq, 
qualys #>'{endpoints,0,details,chain,certs,0,issuerLabel}' AS "issuerLabel"

FROM domain d, history h
WHERE d.id = h.domainhistory AND qualys != '{}'
Group BY "issuerLabel"
ORDER BY freq DESC
;




/////////////////
// multipleVariables using JSON Query
///////////////


SELECT h.domainhistory, 
d.url, 
h.rating,
CASE 		WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,0,name}',qualys #>'{endpoints,0,details,protocols,0,version}'),'"','')='SSL2.0' THEN '1'
            WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,1,name}',qualys #>'{endpoints,0,details,protocols,1,version}'),'"','')='SSL2.0' THEN '1'
			WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,2,name}',qualys #>'{endpoints,0,details,protocols,2,version}'),'"','')='SSL2.0' THEN '1'
			WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,3,name}',qualys #>'{endpoints,0,details,protocols,3,version}'),'"','')='SSL2.0' THEN '1'
			WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,4,name}',qualys #>'{endpoints,0,details,protocols,4,version}'),'"','')='SSL2.0' THEN '1'
            ELSE '0'
END AS "SSL2Enabled",

CASE 		WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,0,name}',qualys #>'{endpoints,0,details,protocols,0,version}'),'"','')='SSL3.0' THEN '1'
            WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,1,name}',qualys #>'{endpoints,0,details,protocols,1,version}'),'"','')='SSL3.0' THEN '1'
			WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,2,name}',qualys #>'{endpoints,0,details,protocols,2,version}'),'"','')='SSL3.0' THEN '1'
			WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,3,name}',qualys #>'{endpoints,0,details,protocols,3,version}'),'"','')='SSL3.0' THEN '1'
			WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,4,name}',qualys #>'{endpoints,0,details,protocols,4,version}'),'"','')='SSL3.0' THEN '1'
            ELSE '0'
END  AS "SSL3Enabled",

CASE 		WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,0,name}',qualys #>'{endpoints,0,details,protocols,0,version}'),'"','')='TLS1.0' THEN '1'
            WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,1,name}',qualys #>'{endpoints,0,details,protocols,1,version}'),'"','')='TLS1.0' THEN '1'
			WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,2,name}',qualys #>'{endpoints,0,details,protocols,2,version}'),'"','')='TLS1.0' THEN '1'
			WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,3,name}',qualys #>'{endpoints,0,details,protocols,3,version}'),'"','')='TLS1.0' THEN '1'
			WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,4,name}',qualys #>'{endpoints,0,details,protocols,4,version}'),'"','')='TLS1.0' THEN '1'
            ELSE '0'
END  AS "TLS1Enabled",

CASE 		WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,0,name}',qualys #>'{endpoints,0,details,protocols,0,version}'),'"','')='TLS1.1' THEN '1'
            WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,1,name}',qualys #>'{endpoints,0,details,protocols,1,version}'),'"','')='TLS1.1' THEN '1'
			WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,2,name}',qualys #>'{endpoints,0,details,protocols,2,version}'),'"','')='TLS1.1' THEN '1'
			WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,3,name}',qualys #>'{endpoints,0,details,protocols,3,version}'),'"','')='TLS1.1' THEN '1'
			WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,4,name}',qualys #>'{endpoints,0,details,protocols,4,version}'),'"','')='TLS1.1' THEN '1'
            ELSE '0'
END  AS "TLS11Enabled",

CASE 		WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,0,name}',qualys #>'{endpoints,0,details,protocols,0,version}'),'"','')='TLS1.2' THEN '1'
            WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,1,name}',qualys #>'{endpoints,0,details,protocols,1,version}'),'"','')='TLS1.2' THEN '1'
			WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,2,name}',qualys #>'{endpoints,0,details,protocols,2,version}'),'"','')='TLS1.2' THEN '1'
			WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,3,name}',qualys #>'{endpoints,0,details,protocols,3,version}'),'"','')='TLS1.2' THEN '1'
			WHEN replace(concat(qualys #>'{endpoints,0,details,protocols,4,name}',qualys #>'{endpoints,0,details,protocols,4,version}'),'"','')='TLS1.2' THEN '1'
            ELSE '0'
END  AS "TLS12Enabled",
qualys #>'{endpoints,0,details,ocspStapling}' AS "ocspstapling",
qualys #>'{endpoints,0,details,supportsRc4}' AS "supportsRc4",
qualys #>'{endpoints,0,details,forwardSecrecy}' AS "forwardSecrecy",
qualys #>'{endpoints,0,details,heartbleed}' AS "heartbleed",
qualys #>'{endpoints,0,details,poodle}' AS "poodle",
qualys #>'{endpoints,0,details,hstsPolicy,status}' AS "hstsPolicy status",
qualys #>'{endpoints,0,details,hpkpPolicy,status}' AS "hpkpPolicy status",
qualys #>'{endpoints,0,details,chain,certs,0,keySize}' AS "keySize",
qualys #>'{endpoints,0,details,chain,certs,0,keyAlg}' AS "keyAlg",
qualys #>'{endpoints,0,details,chain,certs,0,sigAlg}' AS "sigAlg",
qualys #>'{endpoints,0,details,chain,certs,0,issuerLabel}' AS "issuerLabel"

FROM domain d, history h
WHERE d.id = h.domainhistory AND qualys != '{}'
ORDER BY rating DESC;



/////////////////
//   using JSON Query
///////////////






/////////////////
//   using JSON Query
///////////////






/////////////////
//   using JSON Query
///////////////






/////////////////
//   using JSON Query
///////////////






/////////////////
//   using JSON Query
///////////////






/////////////////
//   using JSON Query
///////////////






/////////////////
//   using JSON Query
///////////////





